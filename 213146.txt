•Чекор 4:
$ mkdir SI_2023_lab1_213146 - создавање на директориум
$ cd SI_2023_lab1_213146 - влегување во директориум
$ git init - иницијализација, креирање на нов git репозиториум 

•Чекор 5:
$ git remote add origin https://github.com/sotirsobraliev/SI_2023_lab1_213146.git - поврзување на локалниот со оддалечениот репозиториум

•Чекор 6:
$ nano README.md - креирање на датотеката и нејзино едитирање во nano editor
$ git add README.md - ставање на датотеката на сцена

-За да го извршиме овој чекор внесуваме наш емаил и корисничко име 
$ git config --global user.email sotirsobraliev@gmail.com - го конфигурира нашиот емаил
$ git config --global user.name sotirsobraliev - го конфигурира нашето корисничко име

$ git commit -m "Initial commit" - правење commit, односно зачувување на промените во локалниот репозиториум со соодветна порака

•Чекор 7:
$ nano SILab1.java - креирање на датотеката и нејзино едитирање во nano editor
$ git add SILab1.java - ставање на датотеката на сцена
$ git commit -m "Add java class" - правење commit, односно зачувување на промените во локалниот репозиториум со соодветна порака

•Чекор 8:
$ git push origin master - синхронизација, ставање на новите локални промени на оддалечениот репозиториум

•Чекор 9:
$ git branch bug1 - креирање гранка со име bug1
$ git branch bug2 - креирање гранка со име bug2
$ git branch bug3 - креирање гранка со име bug3

•Чекор 10:
$ git checkout bug1 - префрлање на гранка bug1

•Чекор 11:
$ nano SILab1.java - ја отвара содржината на датотеката во nano editor
Ја поправаме во nano editor под грешката под А. (во for циклусот со бришење на "=", поради тоа што со "=" бара внесување на 1 број повеќе) 

$ git add SILab1.java - ставање на промените во датотеката на сцена
$ git commit -m "Fix wrong loop for reading" - правење commit, односно зачувување на промените во локалниот репозиториум со соодветна порака

•Чекор 12:
$ git checkout bug2 - префрлање на гранката bug2

•Чекор 13:
$ nano SILab1.java - ја отвара содржината на датотеката во nano editor
Ја поправаме во nano editor под грешката под Б. (во методот filterOddNumbers, бришеме едно "=" и додаваме "!" за да важи условот за непарни броеви) 

$ git add SILab1.java - ставање на промените во датотеката на сцена
$ git commit -m "Fix wrong condition in filterOddNumbers" - правење commit, односно зачувување на промените во локалниот репозиториум со соодветна порака


•Чекор 14:
$ git checkout bug3 - префрлање на гранката bug3

•Чекор 15:
$ nano SILab1.java - ја отвара содржината на датотеката во nano editor
Ја поправаме во nano editor под грешката под В. (во методот sumEvenNumbers, менуваме sum да има почетна вредност 0 и наместо знакот за множење"*" ставаме знак "+") 

$ git add SILab1.java - ставање на промените во датотеката на сцена
$ git commit -m "Fix method sumEvenNumbers" - правење commit, односно зачувување на промените во локалниот репозиториум со соодветна порака

•Чекор 16:
$ git push origin bug1 - ставање на новата гранка на оддалечениот репозиториум
$ git push origin bug2 - ставање на новата гранка на оддалечениот репозиториум
$ git push origin bug3 - ставање на новата гранка на оддалечениот репозиториум

•Чекор 17:
$ git checkout master - префрлање на master 

•Чекор 18:
$ git merge bug1
-Нема конфликти
-Стратегија: fast-forward

•Чекор 19:
$ git push origin master - прикачување на сите промени кои сме ги направиле локално во master на оддалечениот репозиториум 
$ git push origin bug1 - прикачување на сите промени кои сме ги направиле локално во гранката bug1 на оддалечениот репозиториум 
$ git push origin bug2 - прикачување на сите промени кои сме ги направиле локално во гранката bug2 на оддалечениот репозиториум 
$ git push origin bug3 - прикачување на сите промени кои сме ги направиле локално во гранката bug3 на оддалечениот репозиториум

•Чекор 20:
$ git merge bug2
-Нема конфликти
-Стратегија: ort - рекурзивна

•Чекор 21:
$ git push origin master - прикачување на сите промени кои сме ги направиле локално во master на оддалечениот репозиториум 
$ git push origin bug1 - прикачување на сите промени кои сме ги направиле локално во гранката bug1 на оддалечениот репозиториум 
$ git push origin bug2 - прикачување на сите промени кои сме ги направиле локално во гранката bug2 на оддалечениот репозиториум 
$ git push origin bug3 - прикачување на сите промени кои сме ги направиле локално во гранката bug3 на оддалечениот репозиториум

•Чекор 22:
$ git checkout bug3 - префрлање на гранката bug3

•Чекор 23:
$ git rebase master - правење на rebase на bug3 во главната гранка master

•Чекор 24:
$ git checkout master - префрлање на гранката master

•Чекор 25:
$ git merge bug3 - спојување на гранката bug3 кон гранката master
-Нема конфликти
-Стратегија: Fast-forward

•Чекор 26:
$ git push origin master - прикачување на сите промени кои сме ги направиле локално во master на оддалечениот репозиториум 
$ git push origin bug1 - прикачување на сите промени кои сме ги направиле локално во гранката bug1 на оддалечениот репозиториум 
$ git push origin bug2 - прикачување на сите промени кои сме ги направиле локално во гранката bug2 на оддалечениот репозиториум 
$ git push --force origin bug3 - прикачување на сите промени кои сме ги направиле локално во гранката bug3 на оддалечениот репозиториум (со помош на примена на --force)


•Чекор 27:
$ git log - ги излистува git логовите (направените commits)
$ nano logs.txt - креираме датотека logs и ја отвараме во nano editor(во која ги ставаме претходно излистаните логови)












